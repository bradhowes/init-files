# -*- Mode: Sh; -*-

if [[ "${SHELL%zsh}" != "${SHELL}" ]]; then
    IS_ZSH=1
else
    IS_ZSH=0
fi

if [[ "${SHELL%bash}" != "${SHELL}" ]]; then
    IS_BASH=1
else
    IS_BASH=0
fi

function die # MSG
{
    echo "*** ${@}"
    exit 1
}

# Add one or more values to a ':' separated environment variable value (eg PATH) as long as it does not already exist in
# the given variable's value.
#
# \param -a optional flag to append new value instead of prepending it
# \param VAR the name of the variable to change, such as PATH or LD_LIBRARY_PATH
# \param VALUE value to add
#
function PathAdd # VAR VALUE [VALUE...]
{
    local APPEND=""
    while [[ "${1#-}" != "${1}" ]]; do # Process anything that begins with a '-' character
	case "${1}" in
	    -a) APPEND="-a" ;;
	    *) echo "*** invalid option - '${1}' ***" ;;
	esac
	shift 1
    done

    local VAR="${1}"
    [[ "${BRH_ARCH}" = "Darwin" && "${VAR}" = "LD_LIBRARY_PATH" ]] && VAR="DY${VAR}"
    shift 1
    
    eval local CURRENT="\$${VAR}"

    for EACH in "${@}"; do
        [[ -d "${EACH}" ]] || continue
        local CHECK=":${CURRENT}:"
        if [[ "${CHECK%%:${EACH}:*}" = "${CHECK}" ]]; then
            if [[ -n "${APPEND}" ]]; then
	        CURRENT="${CURRENT}${CURRENT:+:}${EACH}"
            else
	        CURRENT="${EACH}${CURRENT:+:}${CURRENT}"
            fi

            if [[ "${VAR}" == "PATH" ]]; then
                # Update MANPATH and INFOPATH with some possible values
                local ROOT="${EACH%/bin}"
                PathAdd MANPATH "${ROOT}/man" "${ROOT}/share/man"
                PathAdd INFOPATH "${ROOT}/info" "${ROOT}/share/info"
            fi
        fi

        eval "${VAR}=\"${CURRENT}\""
    done
}

function doScreen # WHERE
{
    # ssh -t $1 TERM="$TERM" screen -dRR -U bash -c "TERM=\"$TERM\" /usr/local/bin/emacs -nw"
    ssh -t $1 screen -dRR -U /usr/local/bin/emacs -nw
}

function ztar # ACTION WHAT
{
    case "${2}" in
	*.bz2) F="j";;
	*.tbz) F="j";;
	*.tar) F="";;
	*) F="z";;
    esac
    tar ${F}${1}vf "${2}"
}

if [[ "${IS_ZSH}" = 1 ]]; then
    function settitle
    {
        print "\e]0;${@}\007"
    }
else
    function settitle
    {
        echo -ne "\033]0;${@}\007"
    }
fi

function spewpwd
{
    settitle "${USER}@${HOSTNAME%%.*}:${PWD}"
}

function cdprompt
{
    builtin cd "${@}" && spewpwd
}

function getownip
{
    setopt sh_word_split local_options
    local CMD=""
    if [[ -x "$(whence -p ifconfig)" ]]; then
        CMD="$(whence -p ifconfig en0)"
    elif [[ -x "$(whence -p ip)" ]]; then
        CMD="$(whence -p ip) address"
    fi

    ${CMD} | awk '/inet.*[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/ {split($2, IP, "/");} END {print IP[1];}'
}


function getownip2
{
    local ENTRIES=""
    local LINE=""
    local ENTRY="" IFACE="" IP="" UP=""

    while
        IFS="" read LINE
    do
        case "x${LINE}" in
            x\	*)
                set -- ${LINE}
                case "${1}" in
                    inet) IP="${2}"; [[ "${3}" = "-->" ]] && UP="active" ;;
                    status:) UP="${2}" ;;
                esac
                ;;
            x*)
                if [[ -n "{$IFACE}" && "${UP}" = "active" && -n "${IP}" ]]; then
                    ENTRY="${IFACE}-${IP}"
                    ENTRIES="${ENTRIES:+${ENTRIES} }${ENTRY}"
                fi
                set -- ${LINE}
                IFACE="${1%:}"
                IP=""
                UP=""
                ;;
        esac
    done < <(ifconfig -a)

    if [[ -n "{$IFACE}" && "${UP}" = "active" && -n "${IP}" ]]; then
        ENTRY="${IFACE}-${IP}"
        ENTRIES="${ENTRIES:+${ENTRIES} }${ENTRY}"
    fi

    # echo "${ENTRIES}"
    set -- ${ENTRIES}

    LAST="${@: -1}"
    echo "${LAST##*-}"
}

function setownip
{
    export IP=$(getownip)
    echo "IP: ${IP}"
}

function find-root
{
    OLD="${PWD}"
    while [[ ! -d "./.git" ]]; do
        if [[ "${PWD}" = "/" ]]; then
            builtin cd "${OLD}"
            return 1
        fi
        builtin cd ..
    done

    pwd
    builtin cd "${OLD}"
    return 0
}

function activate # DIR
{
    local DIR="${1%/}"
    [[ -d "${DIR}" ]] || die "venv directory does not exist"
    [[ -f "${DIR}/bin/activate" ]] || die "invalid venv directory"
    TMP_PS1="${PS1}"
    source "${DIR}/bin/activate"
    PS1="(${DIR##*/}) ${TMP_PS1}"
}

function exit
{
    if [[ -n "${CONDA_SHLVL}" && "${CONDA_SHLVL}" != 0 ]]; then
        conda deactivate
    elif [[ -n "$(whence deactivate)" ]]; then
        deactivate
    else
        builtin exit "$@"
    fi
}

function parse_git_branch
{
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}
